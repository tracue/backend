// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  Male
  Female
  Other
  Unknown
}

model User {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  lastSignIn    DateTime     @default(now()) @map("last_signin")
  email         String       @unique
  password      String
  username      String
  emailVerified Boolean      @default(false) @map("email_verified")
  gender        Gender       @default(Unknown)
  bio           String?      @db.VarChar(150)
  avatar        String?
  favorites     Favorite[]
  watched       Watched[]
  watchLater    WatchLater[]

  @@unique(fields: [id, lastSignIn], name: "tokenVerifier")
  @@map("users")
}

model Movie {
  id               String       @id @default(uuid())
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  tmdbId           Int          @unique @map("tmdb_id")
  title            String
  director         String?
  length           Int          @default(0)
  genres           Genre[]      @relation("movies_in_genre", references: [id])
  releaseDate      String?      @default("-") @map("release_date")
  description      String?
  shortDescription String?      @map("short_description")
  posterUrl        String?      @map("poster_url")
  thumbnailUrl     String?      @map("thumbnail_url")
  imdbUrl          String?      @map("imdb_url")
  favorites        Favorite[]
  watched          Watched[]
  watchLater       WatchLater[]

  @@map("movies")
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[] @relation("movies_in_genre", references: [id])

  @@map("genres")
}

model Favorite {
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")

  @@id([userId, movieId])
  @@map("favorites")
}

model Watched {
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")

  @@id([userId, movieId])
  @@map("watched")
}

model WatchLater {
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")

  @@id([userId, movieId])
  @@map("watch_later")
}
